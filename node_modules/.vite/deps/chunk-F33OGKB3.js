import {
  get,
  set,
  source
} from "./chunk-EJ5QNEJM.js";
import {
  get_prototype_of,
  is_array,
  object_prototype
} from "./chunk-ZHNMYN2P.js";

// node_modules/svelte/src/internal/shared/clone.js
function snapshot(value) {
  return clone(value, /* @__PURE__ */ new Map());
}
function clone(value, cloned) {
  if (typeof value === "object" && value !== null) {
    const unwrapped = cloned.get(value);
    if (unwrapped !== void 0) return unwrapped;
    if (is_array(value)) {
      const copy = (
        /** @type {Snapshot<any>} */
        []
      );
      cloned.set(value, copy);
      for (const element of value) {
        copy.push(clone(element, cloned));
      }
      return copy;
    }
    if (get_prototype_of(value) === object_prototype) {
      const copy = {};
      cloned.set(value, copy);
      for (var key in value) {
        copy[key] = clone(value[key], cloned);
      }
      return copy;
    }
    if (typeof /** @type {T & { toJSON?: any } } */
    value.toJSON === "function") {
      return clone(
        /** @type {T & { toJSON(): any } } */
        value.toJSON(),
        cloned
      );
    }
  }
  return (
    /** @type {Snapshot<T>} */
    structuredClone(value)
  );
}

// node_modules/svelte/src/internal/client/dom/legacy/misc.js
function reactive_import(fn) {
  var s = source(0);
  return function() {
    if (arguments.length === 1) {
      set(s, get(s) + 1);
      return arguments[0];
    } else {
      get(s);
      return fn();
    }
  };
}
function bubble_event($$props, event) {
  var _a;
  var events = (
    /** @type {Record<string, Function[] | Function>} */
    (_a = $$props.$$events) == null ? void 0 : _a[event.type]
  );
  var callbacks = is_array(events) ? events.slice() : events == null ? [] : [events];
  for (var fn of callbacks) {
    fn.call(this, event);
  }
}
function add_legacy_event_listener($$props, event_name, event_callback) {
  var _a;
  $$props.$$events || ($$props.$$events = {});
  (_a = $$props.$$events)[event_name] || (_a[event_name] = []);
  $$props.$$events[event_name].push(event_callback);
}
function update_legacy_props($$new_props) {
  for (var key in $$new_props) {
    if (key in this) {
      this[key] = $$new_props[key];
    }
  }
}
function default_slot($$props) {
  var _a;
  var children = (_a = $$props.$$slots) == null ? void 0 : _a.default;
  if (children === true) {
    return $$props.children;
  } else {
    return children;
  }
}

// node_modules/svelte/src/utils.js
var regex_return_characters = /\r/g;
function hash(str) {
  str = str.replace(regex_return_characters, "");
  let hash2 = 5381;
  let i = str.length;
  while (i--) hash2 = (hash2 << 5) - hash2 ^ str.charCodeAt(i);
  return (hash2 >>> 0).toString(36);
}

export {
  hash,
  snapshot,
  reactive_import,
  bubble_event,
  add_legacy_event_listener,
  update_legacy_props,
  default_slot
};
//# sourceMappingURL=chunk-F33OGKB3.js.map
